generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://kilogram:kilogram@158.160.118.181:5432/kilogram"
}

model User {
  id                        Int               @id @default(autoincrement())
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  username                  String            @unique @default("")
  name                      String            @default("")
  githubId                  String?           @unique
  avatarKey                 String?           @default("")
  lastSeen                  DateTime          @default(now())
  DelayMessage              DelayMessage[]
  messages                  Message[]
  messageReactions          MessageReaction[]
  chats                     UserChat[]
  firebaseNotificationToken String?
}

model Chat {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String         @default("")
  type            String         @default("chat")
  avatarKey       String         @default("")
  joinKey         String?        @unique
  delayedMessages DelayMessage[]
  messages        Message[]
  members         UserChat[]
}

model UserChat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatId])
}

model Message {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    Int
  chatId    Int
  text      String
  fileKeys  String[]
  chat      Chat              @relation(fields: [chatId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  reactions MessageReaction[]
}

model ReactionType {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  code             String            @unique
  emoji            String            @default("")
  messageReactions MessageReaction[]
}

model MessageReaction {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reactionTypeId Int
  messageId      Int
  userId         Int
  message        Message      @relation(fields: [messageId], references: [id])
  reactionType   ReactionType @relation(fields: [reactionTypeId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, reactionTypeId, messageId])
}

model DelayMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  chatId    Int
  text      String
  inTime    DateTime
  fileKeys  String[]
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ExpressSession {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
